<script>

    //Get parameters for Log Grid
    function ReadLogParameters() {
        var daterangepicker = $("#daterangepicker").data("kendoDateRangePicker");
        var range = daterangepicker.range()
        var dateBegin = range.start;
        var dateEnd = range.end;

        return { datebegin: dateBegin.toJSON(), dateend: dateEnd.toJSON() }
    }

    //Task log strings
    function taskFilter(args) {

        args.element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("ReadForDropDownList", "TaskDirectory") ",
                    }
                }
            },
            valuePrimitive: true,
            dataTextField: "Text",
            dataValueField: "Text"
        });
    }

    //Type log strings
    function typeFilter(args) {

        args.element.kendoDropDownList({
            dataSource: [{ text: "INFO", value: "INFO" },
            { text: "ERROR", value: "ERROR" }
            ],
            valuePrimitive: true,
            dataTextField: "text",
            dataValueField: "value"
        });
    }

    //Refresh Log Grid
    function RefreshData() {
        var daterangepicker = $("#daterangepicker").data("kendoDateRangePicker");
        var range = daterangepicker.range()
        var dateBegin = range.start;
        var dateEnd = range.end;
        var grid = $("#gridLog").data("kendoGrid")
        if ((dateBegin != null || dateBegin != undefined) && (dateEnd != null || dateEnd != undefined)) {

            grid.dataSource.read();

        }
    }

</script>
<div style="height:86vh;">
    @(Html.Kendo().Grid<TaskScheduler.UI.Web.Models.LogStringViewModel>()
                                                        .Name("gridLog")
                                                        .HtmlAttributes(new { @class = "data-view", style = "margin: 10px 5px;height:100%" })
                                                        .ToolBar(toolbar =>
                                                        {
                                                            toolbar.Template( @<text>
                                                                <div style="display: inline-block;">
                                                                    @(Html.Kendo().Button().Name("Refresh").Tag("div").HtmlAttributes(new { type = "button" }).Icon("refresh").Content("Обновить").Events(ev => ev.Click("RefreshData")))
                                                                </div>
                                                                <div style="float:right;margin: .16em; vertical-align: middle;">
                                                                    <label class="period-label" for="period" style=" padding-right: .40em; margin-top: 0.30em;">Период:</label>
                                                                    @(Html.Kendo().DateRangePicker()
                                                                                                                          .Name("daterangepicker")
                                                                                                                          .HtmlAttributes(new { style = "float:right; background-color:transparent;" })
                                                                                                                          .Labels(false)
                                                                                                                          .Range(r => r.Start(DateTime.Now).End(DateTime.Now))
                                                                                                                          .Culture("ru-RU")
                                                                                                                          .Events(ev => ev.Change("RefreshData"))
                                                                    )
                                                                </div>
  
                                                            </text>);
        

                                                        })
                                                                        .Columns(columns =>
                                                                        {
                                                                            columns.Bound(p => p.type).Width(200).Title("Тип").ClientTemplate("# if(type == 'INFO') { # <span class='type k-badge k-badge-solid k-badge-info k-badge-md k-badge-rounded k-badge-inline' data-role='badge'>  #= type.toLowerCase() # </span> # } else { # <span class='type k-badge k-badge-solid k-badge-error k-badge-md k-badge-rounded k-badge-inline' data-role='badge'>  #= type.toLowerCase() # </span> # } # <span class='date'>  #=kendo.toString(kendo.parseDate(date),'dd.MM.yyyy') # </span><span class='date'> #= kendo.format('{0:00}:{1:00}:{2:00}', time.Hours, time.Minutes,time.Milliseconds) # </span> ").Filterable((ftb => ftb.Cell(cell => cell.Template("typeFilter").ShowOperators(false).Operator("eq"))));
                                                                            columns.Bound(p => p.task).Width(500).Title("Задание").Filterable((ftb => ftb.Cell(cell => cell.Template("taskFilter").ShowOperators(false).Operator("eq"))));
                                                                            //columns.Bound(p => p.date).Format("{0:dd.MM.yyyy}").Width(140).Filterable(false).HeaderHtmlAttributes(new { style= "visible:hidden;" });
                                                                            //columns.Bound(p => p.time).ClientTemplate("#= kendo.format('{0:00}:{1:00}:{2:00}', time.Hours, time.Minutes,time.Milliseconds) #").Width(100).Filterable(false);
                                                                            columns.Bound(p => p.content).Title("Содержание").Filterable(ftb => ftb.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));

                                                                        })
                                                                        .Sortable()
                                                                        .Scrollable(sc => sc.Endless(true))
                                                                        .Filterable(fb => fb.Extra(false).Mode(GridFilterMode.Row))
                                                                        .DataSource(dataSource => dataSource
                                                                            .Ajax()
                                                                            .PageSize(25)
                                                                            .Read(read => read.Action("ReadLog", "LogSettings").Data("ReadLogParameters"))
                                                                        )
    )
</div>
<style>
    .date {
        color: #939393;
        font-size: 12px;
    }

    .content {
        padding: 8px 20px 20px;
        word-wrap: break-word;
        font-size: 13px;
        overflow: hidden;
        line-height: 1.2;
        text-overflow: ellipsis;
        position: relative;
        z-index: 2;
        white-space: pre-wrap;
    }

    .type {
        margin-right: 10px;
        padding-right:10px;
    }
    .k-badge-error {
        background-color: #f45835;
    }
</style>
